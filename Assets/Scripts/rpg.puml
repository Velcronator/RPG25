@startuml RPG
namespace RPG.Combat {
    class Fighter {
        -float weaponRange
        -float timeBetweenAttacks
        -float weaponDamage
        -Health target
        -float timeSinceLastAttack
        +void Update()
        +void Attack(GameObject combatTarget)
        +void Cancel()
        +bool CanAttack(GameObject combatTarget)
        -void AttackBehaviour()
        -void TriggerAttack()
        -void StopAttack()
        -void Hit() // Animation Event
        -bool GetIsInRange()
    }

    class CombatTarget {
    }

    Fighter --> CombatTarget : interacts
}

namespace RPG.Control {
    class PlayerController {
        -Health health
        +void Start()
        +void Update()
        -bool InteractWithCombat()
        -bool InteractWithMovement()
        -static Ray GetMouseRay()
    }

    class AIController {
        -float chaseDistance
        -float suspicionTime
        -PatrolPath patrolPath
        -float waypointTolerance
        -float waypointDwellTime
        -Fighter fighter
        -Health health
        -Mover mover
        -GameObject player
        -Vector3 guardPosition
        -float timeSinceLastSawPlayer
        -float timeSinceArrivedAtWaypoint
        -int currentWaypointIndex
        +void Start()
        +void Update()
        -void UpdateTimers()
        -void PatrolBehaviour()
        -bool AtWaypoint()
        -void CycleWaypoint()
        -Vector3 GetCurrentWaypoint()
        -void SuspicionBehaviour()
        -void AttackBehaviour()
        -bool InAttackRangeOfPlayer()
    }

    PlayerController --> Fighter : uses
    PlayerController --> Mover : uses
    PlayerController --> CombatTarget : interacts
    AIController --> Fighter : uses
    AIController --> Mover : uses
    AIController --> PatrolPath : uses
}

namespace RPG.Core {
    interface IAction {
        +void Cancel()
    }
    class ActionScheduler {
        -IAction currentAction
        +void StartAction(IAction action)
        +void CancelCurrentAction()
    }
    class FollowCamera {
        -Transform target
        +void LateUpdate()
    }
    class Health {
        -float healthPoints
        -bool isDead
        +bool IsDead()
        +void TakeDamage(float damage)
        -void Die()
    }
    Fighter --> Health : targets
    CombatTarget --> Health : requires
    PlayerController --> Health : uses
    AIController --> Health : uses
    Mover --> Health : uses
    Fighter ..|> IAction
    Fighter --> ActionScheduler : uses
}

namespace RPG.Movement {
    class Mover {
        -Transform target
        -NavMeshAgent navMeshAgent
        -Health health
        +void Start()
        +void Update()
        +void StartMoveAction(Vector3 destination)
        +void MoveTo(Vector3 destination)
        +void Cancel()
        -void UpdateAnimator()
    }
    Fighter --> Mover : uses
    PlayerController --> Mover : uses
    AIController --> Mover : uses
    Mover --> ISaveable : implements
}

namespace RPG.Cinematics {
    class CinematicControlRemover {
        -GameObject player
        +void Start()
        -void DisableControl(PlayableDirector pd)
        -void EnableControl(PlayableDirector pd)
    }

    class CinematicTrigger {
        -bool alreadyTriggered
        +void OnTriggerEnter(Collider other)
        +object CaptureState()
        +void RestoreState(object state)
    }

    CinematicControlRemover --> PlayerController : disables
    CinematicControlRemover --> ActionScheduler : uses
    CinematicTrigger --> PlayableDirector : uses
    CinematicTrigger ..|> ISaveable : implements
}

namespace RPG.SceneManagement {
    class Portal {
        -int sceneToLoad
        -Transform spawnPoint
        -DestinationIdentifier destination
        -float fadeOutTime
        -float fadeInTime
        -float fadeWaitTime
        +void OnTriggerEnter(Collider other)
        -IEnumerator Transition()
        -void UpdatePlayer(Portal otherPortal)
        -Portal GetOtherPortal()
    }

    Portal --> Fader : uses
    Portal --> SavingWrapper : uses
    Portal --> NavMeshAgent : uses
}

namespace RPG.Saving {
    interface ISaveable {
        +object CaptureState()
        +void RestoreState(object state)
    }

    class SaveableEntity {
        -string uniqueIdentifier
        -static Dictionary<string, SaveableEntity> globalLookup
        +string GetUniqueIdentifier()
        +object CaptureState()
        +void RestoreState(object state)
    }

    class SavingSystem {
        +IEnumerator LoadLastScene(string saveFile)
        +void Save(string saveFile)
        +void Load(string saveFile)
        +void Delete(string saveFile)
        -Dictionary<string, object> LoadFile(string saveFile)
        -void SaveFile(string saveFile, object state)
        -void CaptureState(Dictionary<string, object> state)
        -void RestoreState(Dictionary<string, object> state)
        -string GetPathFromSaveFile(string saveFile)
    }

    class SavingWrapper {
        -const string defaultSaveFile
        -float fadeInTime
        +IEnumerator Start()
        +void Update()
        +void Save()
        +void Load()
    }

    SaveableEntity --> ISaveable : uses
    SaveableEntity --> SavingSystem : uses
    SavingWrapper --> SavingSystem : uses
    SavingWrapper --> ISaveable : uses
    Health --> ISaveable : implements
    Mover --> ISaveable : implements
}
@enduml
